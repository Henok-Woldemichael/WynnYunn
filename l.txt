import * as THREE from 'three';
import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
import { CSS2DRenderer } from 'three/addons/renderers/CSS2DRenderer.js';
import { FontLoader } from 'three/addons/loaders/FontLoader.js';
import { TextGeometry } from 'three/addons/geometries/TextGeometry.js';


const artBox = document.getElementById('artBox');
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.001, 1000);
camera.position.set(0,70,265);


const renderer = new THREE.WebGLRenderer({ antialias: true, artBox });
renderer.setSize(window.innerWidth, window.innerHeight);



document.body.appendChild(renderer.domElement);

var controls = new OrbitControls(camera, renderer.domElement);




// Load textures
const textureLoader = new THREE.TextureLoader();
const textureCube2 = textureLoader.load('Images/03WynnYunn.png');
const textureCube1 = textureLoader.load('Images/04WynnYunn.png');

const texturePlane = textureLoader.load('Images/06WynnYunn.png');
const backgroundTexture = textureLoader.load('Images/02WynnYunn.png');
let customFont; // Global variable to hold the font data
const fontLoader = new FontLoader();

const ambientLight = new THREE.AmbientLight( 0xffffff, 10 );
scene.add( ambientLight );


// Create cubes with textures
const cubeGeometry = new THREE.BoxGeometry(10,10,5);
const cubeMaterial1 = new THREE.MeshBasicMaterial({ map: textureCube1 });
const cubeMaterial2 = new THREE.MeshBasicMaterial({ map: textureCube2 });
const cube1 = new THREE.Mesh(cubeGeometry, cubeMaterial1);
const cube2 = new THREE.Mesh(cubeGeometry, cubeMaterial2);
camera.add(cube1);
camera.add(cube2);
cube1.position. set(10,65,220);
cube2.position.set(-10,65,220);

// Create a plane with a texture
const planeGeometry = new THREE.PlaneGeometry(160, 400);
const planeMaterial = new THREE.MeshBasicMaterial({ map: texturePlane });
const plane = new THREE.Mesh(planeGeometry, planeMaterial);
plane.rotation.x = -Math.PI / 2;

// Add cubes and plane to the scene
scene.add(cube1);
scene.add(cube2);
scene.add(plane);

// Set up the background
scene.background = backgroundTexture;


// Add a click event listener to the "ART" box element.

function createClickableDivForCube() {
  const cube1Position = cube1.position.clone();
  const screenPosition = cube1Position.project(camera);
  const screenX = (screenPosition.x + 1) / 2 * window.innerWidth * 100;
  const screenY = (-screenPosition.y + 1) / 2 * window.innerHeight;

  const clickableDiv = document.getElementById('artLink');
  
  

  // Add a click event listener to the clickableDiv.
  clickableDiv.addEventListener('click', function () {
      // Redirect to "another.html" when clickableDiv is clicked.
      window.location.href = 'art.html'; // Replace with your desired URL
  });
}

createClickableDivForCube();
fontLoader.load
(
    'cake.json',
    function(font)
    {
       
        const textGeometry = new TextGeometry("\'BIO\'", {
            font: font,
            size: 5,
            height: 2,
           
          });
        
             
          const sunsetPinkColor = new THREE.Color("rgb(255, 130, 196)"); // Define your sunset pink color
          const textMaterial = new THREE.MeshPhongMaterial({ color: sunsetPinkColor }); // Set the material color

        
          const textMesh = new THREE.Mesh
          (
            textGeometry,textMaterial
          );
        
          textMesh.position.set(6,49,220)      
           scene.add(textMesh);

       
    });

    fontLoader.load
(
    'cake.json',
    function(font)
    {
       
        const textGeometry = new TextGeometry("\'ART\'", {
            font: font,
            size: 5,
            height: 2,
           
          })
        
          
          const sunsetGreen = new THREE.Color("rgb(220,109,32)"); // Define your sunset pink color
          const textMaterial = new THREE.MeshBasicMaterial({ map: textureCube2 }); // Set the material color

        
          const textMesh = new THREE.Mesh
          (
            textGeometry,textMaterial
          );
        
          textMesh.position.set(-19,49,220)      
           scene.add(textMesh);

       
    });


// Animation
const animate = () => {
    requestAnimationFrame(animate);

   
    cube1.rotation.x += 0.0045;

    cube2.rotation.x += 0.0045;

    
    controls.update();

    renderer.render(scene, camera);

 
};


animate();

